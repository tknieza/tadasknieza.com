/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

// eslint-disable-next-line no-unused-vars
import React, { useRef, Suspense } from 'react'
// import { useLoader } from '@react-three/fiber'
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'

// import { useGLTF } from '@react-three/drei'

// export default function Model(props) {
//   const group = useRef()
//   const { nodes, materials } = useGLTF('/laptop.glb')
//   return (
//     <group ref={group} {...props} dispose={null}>
//       <mesh
//         castShadow
//         receiveShadow
//         geometry={nodes.laptop.geometry}
//         material={materials.palette}
//         rotation={[Math.PI / 2, 0, 0]}
//       />
//       <mesh
//         castShadow
//         receiveShadow
//         geometry={nodes.laptop001.geometry}
//         material={materials['palette.001']}
//         rotation={[Math.PI / 2, 0, 0]}
//       />
//       <mesh
//         castShadow
//         receiveShadow
//         geometry={nodes.laptop002.geometry}
//         material={materials['palette.002']}
//         rotation={[Math.PI / 2, 0, 0]}
//       />
//     </group>
//   )
// }

// export default function Model({ ...otherProps }) {
//   const gltf = useLoader(GLTFLoader, '/laptop.glb')
//   return <primitive object={gltf.scene} {...otherProps} />
// }

export default function loadGLTFModel(
  scene,
  glbPath,
  options = { receiveShadow: true, castShadow: true }
) {
  const { receiveShadow, castShadow } = options
  return new Promise((resolve, reject) => {
    const loader = new GLTFLoader()

    loader.load(
      glbPath,
      gltf => {
        const obj = gltf.scene
        obj.name = 'model'
        obj.position.y = 0
        obj.position.x = 0
        obj.receiveShadow = receiveShadow
        obj.castShadow = castShadow
        scene.add(obj)

        obj.traverse(function (child) {
          if (child.isMesh) {
            child.castShadow = castShadow
            child.receiveShadow = receiveShadow
          }
        })
        resolve(obj)
      },
      undefined,
      function (error) {
        reject(error)
      }
    )
  })
}

// useGLTF.preload('/laptop.glb')
